# .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [main]
    tags: ["v*"] # Run CI on version tags
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Flake
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Build flake and check dev environment
        run: |
          nix flake check --accept-flake-config
          nix develop -c echo "Flake development environment builds successfully"

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Run linters (Black, Flake8)
        run: |
          nix develop --command lint

  typecheck:
    name: Type Check (pyright)
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Run pyright type checker
        run: |
          # Use the new 'typecheck' command from flake.nix
          nix develop --command typecheck

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Setup Python environment and run unit tests
        run: |
          # Set up the environment using the setup command from flake.nix
          nix develop --command setup
          
          # Run unit tests only
          # The conftest.py will automatically create a unit test cache directory
          nix develop --command run-tests --unit

      - name: Upload unit test coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report-${{ runner.os }}
          path: |
            ./htmlcov/
            ./coverage.xml

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Setup Python environment and run integration tests
        run: |
          # Set up the environment using the setup command from flake.nix
          nix develop --command setup
          
          # Run integration tests only
          # The conftest.py will automatically create an integration test cache directory
          nix develop --command run-tests --integration

      - name: Upload integration test coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage-report-${{ runner.os }}
          path: |
            ./htmlcov/
            ./coverage.xml

  upload-coverage:
    name: Upload Combined Coverage
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage-report-${{ runner.os }}
          path: ./coverage-unit/
      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage-report-${{ runner.os }}
          path: ./coverage-integration/
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage-unit/coverage.xml,./coverage-integration/coverage.xml
          fail_ci_if_error: true
        env:
          # Add the Codecov token from repository secrets
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish:
    name: Build and Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, typecheck, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-nixos
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Build package distributions using Nix environment
        run: |
          nix develop --command build
          ls -l dist/
      - name: Verify built package installation (Wheel)
        run: |
          python3 -m venv .verifier-venv
          source .verifier-venv/bin/activate
          python -m pip install --upgrade pip
          WHEEL_FILE=$(ls dist/*.whl)
          echo "Verifying wheel: $WHEEL_FILE"
          python -m pip install "$WHEEL_FILE"
          echo "Checking installation..."
          python -c "import mcp_nixos; print(f'Successfully installed mcp_nixos version: {mcp_nixos.__version__}')"
          deactivate
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
